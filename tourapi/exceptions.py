# --- exceptions.py (또는 같은 파일 상단에 추가) ---
import json
import xml.etree.ElementTree as ET
from typing import Any, Dict

class TourAPIError(Exception):
    def __init__(self, message: str, code: str | None = None, raw: Any = None) -> None:
        super().__init__(message)
        self.code = code
        self.raw = raw

# 공공데이터포털(XML) 레이어
class PortalError(TourAPIError): ...
class PortalApplicationError(PortalError): ...
class PortalHttpError(PortalError): ...
class PortalNoOpenAPIServiceError(PortalError): ...
class PortalServiceAccessDeniedError(PortalError): ...
class PortalRequestLimitExceededError(PortalError): ...
class PortalServiceKeyNotRegisteredError(PortalError): ...
class PortalDeadlineExpiredError(PortalError): ...
class PortalUnregisteredIpError(PortalError): ...
class PortalUnknownError(PortalError): ...

PORTAL_CODE_MAP: Dict[str, type[PortalError]] = {
    "01": PortalApplicationError,                    # APPLICATION_ERROR
    "04": PortalHttpError,                           # HTTP_ERROR
    "12": PortalNoOpenAPIServiceError,               # NO_OPENAPI_SERVICE_ERROR
    "20": PortalServiceAccessDeniedError,            # SERVICE_ACCESS_DENIED_ERROR
    "22": PortalRequestLimitExceededError,           # LIMITED_NUMBER_OF_SERVICE_REQUESTS_EXCEEDS_ERROR
    "30": PortalServiceKeyNotRegisteredError,        # SERVICE_KEY_IS_NOT_REGISTERED_ERROR
    "31": PortalDeadlineExpiredError,                # DEADLINE_HAS_EXPIRED_ERROR
    "32": PortalUnregisteredIpError,                 # UNREGISTERED_IP_ERROR
    "99": PortalUnknownError,                        # UNKNOWN_ERROR
}

def raise_portal(code: str, msg: str, raw: Any) -> None:
    exc = PORTAL_CODE_MAP.get(code, PortalError)
    raise exc(f"[PORTAL:{code}] {msg}".strip(), code=code, raw=raw)

# 제공기관(JSON header) 레이어
class ProviderError(TourAPIError): ...
class ProviderApplicationError(ProviderError): ...
class ProviderDbError(ProviderError): ...
class ProviderNoDataError(ProviderError): ...
class ProviderHttpError(ProviderError): ...
class ProviderServiceTimeoutError(ProviderError): ...
class ProviderInvalidRequestParameterError(ProviderError): ...
class ProviderNoMandatoryRequestParametersError(ProviderError): ...
class ProviderNoOpenAPIServiceError(ProviderError): ...
class ProviderServiceAccessDeniedError(ProviderError): ...
class ProviderTemporarilyDisableServiceKeyError(ProviderError): ...
class ProviderRequestLimitExceededError(ProviderError): ...
class ProviderServiceKeyNotRegisteredError(ProviderError): ...
class ProviderDeadlineExpiredError(ProviderError): ...
class ProviderUnregisteredIpError(ProviderError): ...
class ProviderUnsignedCallError(ProviderError): ...
class ProviderUnknownError(ProviderError): ...

PROVIDER_CODE_MAP: Dict[str, type[ProviderError]] = {
    "01": ProviderApplicationError,                      # APPLICATION_ERROR
    "02": ProviderDbError,                               # DB_ERROR
    "03": ProviderNoDataError,                           # NODATA_ERROR
    "04": ProviderHttpError,                             # HTTP_ERROR
    "05": ProviderServiceTimeoutError,                   # SERVICETIMEOUT_ERROR
    "10": ProviderInvalidRequestParameterError,          # INVALID_REQUEST_PARAMETER_ERROR
    "11": ProviderNoMandatoryRequestParametersError,     # NO_MANDATORY_REQUEST_PARAMETERS_ERROR
    "12": ProviderNoOpenAPIServiceError,                 # NO_OPENAPI_SERVICE_ERROR
    "20": ProviderServiceAccessDeniedError,              # SERVICE_ACCESS_DENIED_ERROR
    "21": ProviderTemporarilyDisableServiceKeyError,     # TEMPORARILY_DISABLE_THE_SERVICEKEY_ERROR
    "22": ProviderRequestLimitExceededError,             # LIMITED_NUMBER_OF_SERVICE_REQUESTS_EXCEEDS_ERROR
    "30": ProviderServiceKeyNotRegisteredError,          # SERVICE_KEY_IS_NOT_REGISTERED_ERROR
    "31": ProviderDeadlineExpiredError,                  # DEADLINE_HAS_EXPIRED_ERROR
    "32": ProviderUnregisteredIpError,                   # UNREGISTERED_IP_ERROR
    "33": ProviderUnsignedCallError,                     # UNSIGNED_CALL_ERROR
    "99": ProviderUnknownError,                          # UNKNOWN_ERROR
}

def raise_provider(code: str, msg: str, raw: Any) -> None:
    # 정상 코드는 '0000' 또는 '00'로 오는 경우가 있음
    if code in ("0000", "00"):
        return
    norm = code[-2:] if len(code) >= 2 else code
    exc = PROVIDER_CODE_MAP.get(norm, ProviderError)
    raise exc(f"[PROVIDER:{code}] {msg}".strip(), code=code, raw=raw)
